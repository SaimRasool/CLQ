@model FOS.Shared.UserData

@{
    ViewBag.Title = "Manage User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- BEGIN PAGE HEADER-->
<div class="row-fluid">
    <div class="span12">
        <!-- BEGIN THEME CUSTOMIZER-->

        <!-- END THEME CUSTOMIZER-->
        <!-- BEGIN PAGE TITLE & BREADCRUMB-->
        <h3 class="page-title"></h3>
        <ul class="breadcrumb">
            <li>
                <a href="#">Admin Panel</a>
                <span class="divider">/</span>
            </li>
            <li>
                <a href="#">Manage Users</a>
            </li>

        </ul>
        <!-- END PAGE TITLE & BREADCRUMB-->
    </div>
</div>


<div class="row-fluid">
    <div class="span12">
        <!-- BEGIN SAMPLE FORMPORTLET-->
        <div class="widget green" style="">
            <div class="widget-title">
                <h4>Manage User</h4>
                <span class="tools">
                    @*<a href="javascript:;" class="icon-chevron-down"></a>*@
                    @*<a href="javascript:;" class="icon-remove"></a>*@
                </span>
            </div>
            <div class="widget-body">

                <!-- BEGIN FORM-->
                @*<form action="#" class="form-horizontal">*@
                @using (Ajax.BeginForm("AddUpdateUser", "AdminPanel", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure" }, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(true)

                    <div class="span12">
                    
                        <div class="span6">    
                    
                            <!-- User Name -->
                            <div class="control-group">
                                <label class="control-label">User Name *</label>
                                <div class="controls">

                                    @Html.EditorFor(model => model.UserName, new { @class = "input-xlarge", @id = "txtUserName" })
                                    @Html.HiddenFor(model => model.ID)
                                </div>
                            </div>

                            <!-- Password -->
                            <div class="control-group">
                                <label class="control-label">Password *</label>
                                <div class="controls">
                                    @Html.EditorFor(model => model.Password, new { @class = "input-xlarge", @id = "txtPassword" })
                                </div>
                            </div>

                            <!-- Select Role Name -->
                            <div class="control-group">
                                <label class="control-label">Select Role *</label>
                                <div class="controls">

                                    @Html.DropDownListFor(model => model.RoleID , new SelectList(Model.Roles, "RoleID", "RoleName") , new { @class = "input-xlarge", @style="width: 212px;" })                                               

                                </div>
                            </div>
                    
                        </div>

                        <div class="span6"> 

                            <!-- EmailID -->
                            <div class="control-group">
                                <label class="control-label">Email *</label>
                                <div class="controls">
                                    @Html.EditorFor(model => model.EmailID, new { @class = "input-xlarge", @id = "" })
                                </div>
                            </div>
                    
                            <!-- PhoneNo -->
                            <div class="control-group">
                                <label class="control-label">Phone No *</label>
                                <div class="controls">
                                    @Html.EditorFor(model => model.PhoneNo, new { @class = "input-xlarge", @id = "" })
                                </div>
                            </div>
                    
                            <!-- Address -->
                            <div class="control-group">
                                <label class="control-label">Address *</label>
                                <div class="controls">
                                    @Html.EditorFor(model => model.Address, new { @class = "input-xlarge", @id = "" })
                                </div>
                            </div>
                   
                            <!-- Is Active -->
                            <div class="control-group">
                                <label class="control-label"></label>
                                <div class="controls">
                                    @Html.CheckBoxFor(model => model.IsActive , new { @style = "width: 18px; height: 18px", @id="cbIsActive" }) <span style="margin-left: 7px; font-weight: bold; color: blue;border-bottom: 3px solid;">Is Active</span>
                                </div>
                            </div>

                            <!-- Buttons -->
                            <div class="form-actions" style="padding-left: 240px;background-color: transparent;">
                                <button type="submit" class="btn btn-small btn-primary" id="btnSubmit" onclick="FormValidation()"><i class="icon-ok icon-white" style="padding-right:8px"></i><span id="create">Create</span></button>
                                <button type="button" class="btn btn-small btn-info" id="btnRefresh" onclick="Refresh()"><i class="icon-ban-circle icon-white" style="padding-right:8px"></i>Reset</button>
                            </div>

                            </div>




                    </div>
                }
                <!-- END FORM-->

            </div>
        </div>
        <!-- END SAMPLE FORM PORTLET-->
    </div>
</div>




<!-- BEGIN EDITABLE TABLE widget-->
<div class="row-fluid">
    <div class="span12">
        <!-- BEGIN EXAMPLE TABLE widget-->
        <div class="widget green">
            <div class="widget-title">
                <h4>View Detail</h4>
                <span class="tools">
                    @*<a href="javascript:;" class="icon-chevron-down"></a>*@
                    @*<a href="javascript:;" class="icon-remove"></a>*@
                </span>
            </div>
            <div class="widget-body">
                <div>
                    <div class="clearfix">
                        @*<div class="btn-group">
                            <button id="editable-sample_new" class="btn green">
                                Add New <i class="icon-plus"></i>
                            </button>
                        </div>*@

                    </div>
                    <div class="space15"></div>
                    <table class="table table-striped table-hover table-bordered" id="example" style="width: 100%;">
                        <thead>
                            <tr>
                                <th style="width: 10% !important">Sr #</th>
                                <th style="width: 16% !important">User Name</th>
                                <th style="width: 16% !important">Role Name</th>
                                <th style="width: 16% !important">Address</th>
                                <th style="width: 16% !important">Email</th>
                                <th style="width: 16% !important">Phone No</th>
                                <th style="width: 10% !important">Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- END EXAMPLE TABLE widget-->
    </div>
</div>
<!-- END EDITABLE TABLE widget-->

<script>
    $(document).ready(function () {

        $("#cbIsActive").attr('checked', true);

        var WriteCheck = "0";

        if (WriteCheck == "@HttpContext.Current.Session["WriteCheck"]") {
            // $("#btnNew").css("display", "none");
            $("#btnSubmit").attr("disabled", true);
        }
        else {
        }

        GenerateDetailGrid();

        $("#liAdminPanel,#liUsers").addClass("active");

        $("#btnRefresh").click(function () {
            Refresh();
        });

        $("#UserName").focusin(function () {
            $(this).parent().parent().removeClass('error');
        });

        $("#Password").focusin(function () {
            $(this).parent().parent().removeClass('error');
        });

        $("#RoleID").focusin(function () {
            $(this).parent().parent().removeClass('error');
        });

    });


    function Refresh() {
        $("#RoleID").val("0");
        $("#RoleID").trigger("chosen:updated");

        $('#ID').val(0);
        $("#UserName").val("");
        $("#Password").val("");
        $("#Address").val("");
        $("#PhoneNo").val("");
        $("#EmailID").val("");
        $("#cbIsActive").attr('checked', false);
        $("#create").text("Create");

    }

    function FormValidation() {
        var status = false;

        if ($("#UserName").val() == "") {
            $("#UserName").parent().parent().addClass('error');
            status = false;
        }
        if ($("#Password").val() == "") {
            $("#Password").parent().parent().addClass('error');
            status = false;
        }
        if ($("#RoleID").val() == "") {
            $("#RoleID").parent().parent().addClass('error');
            status = false;
        }

        if ($("#UserName").val() == "" || $("#Password").val() == "" || $("#txtRole").val() == "0") { alertify.error("Please Fill The Form properly"); }

        return status;

    }

    function OnSuccess(response) {
        if (response == "1") {
            alertify.success("User Saved Successfully.");
            Refresh();
            var dt = $('#example').DataTable();
            dt.ajax.reload();
        }
        else if (response == "0") {
            alertify.error("Unable To Save User.");
        }
        else {
            alertify.error(response);
        }

    }

    function OnFailure(response) {
        if (response.status == 422) {
            var errors = JSON.parse(response.responseText);
            alertify.error(errors.errors);
        }
        else {
            alertify.error(response);
        }
    }

    function GenerateDetailGrid() {

        $("#example").DataTable({
            "oLanguage": {
                "sSearch": "Search From Name & Short Name:"
            },

            "serverSide": true, // For Process Server Side
            "filter": true, // This Is For Disable Filter (Search Box)
            "orderMulti": false, // For Disable multiple Columns At Once
            "bRetrieve": true,
            "bDestroy" : true,
            "processing": false,
            "autoWidth": true,
            "paging": true,
            "aoColumnDefs": [
                                    {
                                        'bSortable': false,
                                        'aTargets': [0 , 3]
                                    } //disables sorting for column one
            ],

            //Ajax Request For Get Data From Controller
            "ajax": {
                "url": "@Url.Action("UserDataHandler", "AdminPanel")",
                "type": "POST",
                "contentType": 'application/json; charset=utf-8',
                'data': function (data) {
                    return data = JSON.stringify(data);
                },
            },

            "fnDrawCallback": function (osetting) {

                var UpdateCheck = "0";
                var DeleteCheck = "0";

                if (UpdateCheck == "@HttpContext.Current.Session["UpdateCheck"]") { $(".edit").css("display", "none"); }
                else {
                    $(".edit").on("click", function () {

                        Refresh();

                        $('#create').text('Update');
                        $('#ID').val($(this).attr("data-id"));
                        $("#UserName").val($(this).attr("data-name"));
                        $("#Password").val($(this).attr("data-password"));
                        $("#RoleID").val($(this).attr("data-roleID"));
                        $("#Address").val($(this).attr("data-address"));
                        $("#PhoneNo").val($(this).attr("data-phoneno"));
                        $("#DOB").val($(this).attr("data-dob"));
                        $("#EmailID").val($(this).attr("data-emailid"));
                        $("#cbIsActive").attr('checked', ($(this).attr("data-isactive") == "true" ? true : false));
                        $("#UserName").focus();

                    });
                }

                if (UpdateCheck == "@HttpContext.Current.Session["DeleteCheck"]") { $(".delete").css("display", "none"); }
                else {
                    $(".delete").on("click", function () {

                        var userID = $(this).attr("data-id");

                        // confirm dialog
                        alertify.confirm("Are You Sure You Want To Delete This Record ?  ", function (e) {
                            if (e) {

                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("DeleteUser", "AdminPanel")",
                                    data: { UserID: userID },
                                    success: function (data) {

                                        if (data == "0") {
                                            alertify.success('Record Deleted Successfully');
                                            var dt = $('#example').DataTable();
                                            dt.ajax.reload();
                                        }

                                        else { alertify.error('An Error Occured, Please Try Again.'); }
                                    }

                                });

                            } else { }
                        });

                    });
                }
            },

            "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                $("td:first", nRow).html(iDisplayIndex + 1);
                return nRow;
            },

            "oLanguage": { "sSearch": "Search:" },
            "sDom": 'lftipr',
            "processing": false, // For Show ProgressBar
            "deferRender": true,
            "bSelect": true,
            "bDestroy" : true,
            "columns": [
                             { "data": "ID", "name": "ID", "bSortable": false, },
                             { "data": "UserName", "name": "UserName" },
                             { "data": "RoleName", "name": "Role" },
                             { "data": "Address", "name": "Address" },
                             { "data": "EmailID", "name": "Email" },
                             { "data": "PhoneNo", "name": "PhoneNo" },
                             {
                                 "sClass": "center-align-td",
                                 "mData": null,
                                 "bSortable": false,
                                 "mRender": function (data, type, row) {
                                     return '<button class="btn btn-success edit" data-id="' + row.ID + '"  data-name= "' + row.UserName + '" data-password= "' + row.Password + '" data-roleID= "' + row.RoleID + '" data-phoneno = "' + row.PhoneNo + '" data-address ="' + row.Address + '" data-emailid = "' + row.EmailID + '" data-dob = "' + row.DOB + '" data-isactive = "' + row.IsActive + '">' + '<i class=icon-pencil></i>' + '</button>&nbsp;<button class="btn btn-info delete" data-id=' + row.ID + '>' + '<i class=icon-trash></i>' + '</button>';
                                 }
                             }
            ], "order": [1, "asc"]


    });

    }

</script>